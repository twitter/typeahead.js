{"ts":1362740060318,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * typeahead.js\n * https://github.com/twitter/typeahead\n * Copyright 2013 Twitter, Inc. and other contributors; Licensed MIT\n */\n\nvar TypeaheadView = (function() {\n\n  var html = {\n    wrapper: '<span class=\"twitter-typeahead\"></span>',\n    hint: '<input class=\"tt-hint\" type=\"text\" autocomplete=\"off\" spellcheck=\"false\" disabled>',\n    dropdown: '<ol class=\"tt-dropdown-menu tt-is-empty\"></ol>'\n  };\n\n  // constructor\n  // -----------\n\n  function TypeaheadView(o) {\n    var $menu, $input, $hint;\n\n    utils.bindAll(this);\n\n    this.$node = wrapInput(o.input);\n    this.datasets = o.datasets;\n\n    $menu = this.$node.find('.tt-dropdown-menu');\n    $input = this.$node.find('.tt-query');\n    $hint = this.$node.find('.tt-hint');\n\n    this.dropdownView = new DropdownView({ menu: $menu })\n    .on('select', this._handleSelection)\n    .on('cursorOn', this._clearHint)\n    .on('cursorOn', this._setInputValueToSuggestionUnderCursor)\n    .on('cursorOff', this._setInputValueToQuery)\n    .on('cursorOff', this._updateHint)\n    .on('suggestionsRender', this._updateHint)\n    .on('show', this._updateHint)\n    .on('hide', this._clearHint);\n\n    this.inputView = new InputView({ input: $input, hint: $hint })\n    .on('focus', this._showDropdown)\n    .on('blur', this._hideDropdown)\n    .on('blur', this._setInputValueToQuery)\n    .on('enter', this._handleSelection)\n    .on('queryChange', this._clearHint)\n    .on('queryChange', this._clearSuggestions)\n    .on('queryChange', this._getSuggestions)\n    .on('whitespaceChange', this._updateHint)\n    .on('queryChange whitespaceChange', this._showDropdown)\n    .on('queryChange whitespaceChange', this._setLanguageDirection)\n    .on('esc', this._hideDropdown)\n    .on('esc', this._setInputValueToQuery)\n    .on('tab up down', this._managePreventDefault)\n    .on('up down', this._moveDropdownCursor)\n    .on('up down', this._showDropdown)\n    .on('tab left right', this._autocomplete);\n  }\n\n  utils.mixin(TypeaheadView.prototype, EventTarget, {\n    // private methods\n    // ---------------\n\n    _managePreventDefault: function(e) {\n      var $e = e.data,\n          hint,\n          inputValue,\n          preventDefault = false;\n\n      switch (e.type) {\n        case 'tab':\n          hint = this.inputView.getHintValue();\n          inputValue = this.inputView.getInputValue();\n          preventDefault = hint && hint !== inputValue;\n          break;\n\n        case 'up':\n        case 'down':\n          preventDefault = !$e.shiftKey && !$e.ctrlKey && !$e.metaKey;\n          break;\n      }\n\n      preventDefault && $e.preventDefault();\n    },\n\n    _setLanguageDirection: function() {\n      var dirClassName = 'tt-' + this.inputView.getLanguageDirection();\n\n      if (!this.$node.hasClass(dirClassName)) {\n        this.$node.removeClass('tt-ltr tt-rtl').addClass(dirClassName);\n      }\n    },\n\n    _updateHint: function() {\n      var dataForFirstSuggestion = this.dropdownView.getFirstSuggestion(),\n          hint = dataForFirstSuggestion ? dataForFirstSuggestion.value : null,\n          inputValue,\n          query,\n          escapedQuery,\n          beginsWithQuery,\n          match;\n\n      if (hint && this.dropdownView.isOpen() && !this.inputView.isOverflow()) {\n        inputValue = this.inputView.getInputValue();\n        query = inputValue\n        .replace(/\\s{2,}/g, ' ') // condense whitespace\n        .replace(/^\\s+/g, ''); // strip leading whitespace\n        escapedQuery = utils.escapeRegExChars(query);\n\n        beginsWithQuery = new RegExp('^(?:' + escapedQuery + ')(.*$)', 'i');\n        match = beginsWithQuery.exec(hint);\n\n        this.inputView.setHintValue(inputValue + (match ? match[1] : ''));\n      }\n    },\n\n    _clearHint: function() {\n      this.inputView.setHintValue('');\n    },\n\n    _clearSuggestions: function() {\n      this.dropdownView.clearSuggestions();\n    },\n\n    _setInputValueToQuery: function() {\n      this.inputView.setInputValue(this.inputView.getQuery());\n    },\n\n    _setInputValueToSuggestionUnderCursor: function(e) {\n      var suggestion = e.data;\n\n      this.inputView.setInputValue(suggestion.value, true);\n    },\n\n    _showDropdown: function() {\n      this.dropdownView.show();\n    },\n\n    _hideDropdown: function(e) {\n      this.dropdownView[e.type === 'blur' ?\n        'hideUnlessMouseIsOverDropdown' : 'hide']();\n    },\n\n    _moveDropdownCursor: function(e) {\n      var $e = e.data;\n\n      if (!$e.shiftKey && !$e.ctrlKey && !$e.metaKey) {\n        this.dropdownView[e.type === 'up' ?\n          'moveCursorUp' : 'moveCursorDown']();\n      }\n    },\n\n    _handleSelection: function(e) {\n      var byClick = e.type === 'select',\n          suggestionData = byClick ?\n            e.data : this.dropdownView.getSuggestionUnderCursor();\n\n      if (suggestionData) {\n        this.inputView.setInputValue(suggestionData.value);\n\n        // if triggered by click, ensure the query input still has focus\n        // if triggered by keypress, prevent default browser behavior\n        // which is most likely the submission of a form\n        // note: e.data is the jquery event\n        byClick ? this.inputView.focus() : e.data.preventDefault();\n\n        // focus is not a synchronous event in ie, so we deal with it\n        byClick && utils.isMsie() ?\n          setTimeout(this.dropdownView.hide, 0) : this.dropdownView.hide();\n      }\n    },\n\n    _getSuggestions: function() {\n      var that = this,\n          query = this.inputView.getQuery();\n\n      if (utils.isBlankString(query)) {\n        return;\n      }\n\n      utils.each(this.datasets, function(i, dataset) {\n        dataset.getSuggestions(query, function(suggestions) {\n          that._renderSuggestions(query, dataset, suggestions);\n        });\n      });\n    },\n\n    _renderSuggestions: function(query, dataset, suggestions) {\n      if (query !== this.inputView.getQuery()) { return; }\n\n      suggestions = suggestions.slice(0, dataset.limit);\n      this.dropdownView.renderSuggestions(query, dataset, suggestions);\n    },\n\n    _autocomplete: function(e) {\n      var isCursorAtEnd, ignoreEvent, query, hint;\n\n      if (e.type === 'right' || e.type === 'left') {\n        isCursorAtEnd = this.inputView.isCursorAtEnd();\n        ignoreEvent = this.inputView.getLanguageDirection() === 'ltr' ?\n          e.type === 'left' : e.type === 'right';\n\n        if (!isCursorAtEnd || ignoreEvent) { return; }\n      }\n\n      query = this.inputView.getQuery();\n      hint = this.inputView.getHintValue();\n\n      if (hint !== '' && query !== hint) {\n        this.inputView.setInputValue(hint);\n      }\n    },\n\n    // public methods\n    // --------------\n\n    destroy: function() {\n      this.inputView.destroy();\n      this.dropdownView.destroy();\n\n      destroyDomStructure(this.$node);\n\n      this.$node = null;\n    }\n  });\n\n  return TypeaheadView;\n\n  function wrapInput(input) {\n    var $input = $(input),\n        $hint = $(html.hint).css({\n          'background-color': $input.css('background-color')\n        });\n\n    if ($input.length === 0) {\n      return null;\n    }\n\n    // store the original values of the attrs that get modified\n    // so modifications can be reverted on destroy\n    $input.data('ttAttrs', {\n      dir: $input.attr('dir'),\n      autocomplete: $input.attr('autocomplete'),\n      spellcheck: $input.attr('spellcheck')\n    });\n\n    // ie7 does not like it when dir is set to auto,\n    // it does not like it one bit\n    try { !$input.attr('dir') && $input.attr('dir', 'auto'); } catch (e) {}\n\n    return $input\n    .attr({ autocomplete: 'off', spellcheck: false })\n    .addClass('tt-query')\n    .wrap(html.wrapper)\n    .parent()\n    .prepend($hint)\n    .append(html.dropdown);\n  }\n\n  function destroyDomStructure($node) {\n    var $input = $node.find('.tt-query');\n\n    // need to remove attrs that weren't previously defined and\n    // revert attrs that originally had a value\n    utils.each($input.data('ttAttrs'), function(key, val) {\n      utils.isUndefined(val) ? $input.removeAttr(key) : $input.attr(key, val);\n    });\n\n    $input.detach().removeClass('tt-query').insertAfter($node);\n\n    $node.remove();\n  }\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":8058}]],"length":8058}
{"contributors":[],"silentsave":false,"ts":1362741452262,"patch":[[{"diffs":[[0,"iew.hide();\n"],[1,"        this.inputView.trigger(\"twitterTypeaheadEvent\",suggestionData.data);\n"],[0,"      }\n    "]],"start1":5286,"start2":5286,"length1":24,"length2":101}]],"length":8135,"saved":false}
