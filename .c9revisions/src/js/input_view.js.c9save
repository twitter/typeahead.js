{"ts":1362740043108,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * typeahead.js\n * https://github.com/twitter/typeahead\n * Copyright 2013 Twitter, Inc. and other contributors; Licensed MIT\n */\n\nvar InputView = (function() {\n\n  // constructor\n  // -----------\n\n  function InputView(o) {\n    var that = this;\n\n    utils.bindAll(this);\n\n    this.specialKeyCodeMap = {\n      9: 'tab',\n      27: 'esc',\n      37: 'left',\n      39: 'right',\n      13: 'enter',\n      38: 'up',\n      40: 'down'\n    };\n\n    this.query = '';\n\n    this.$hint = $(o.hint);\n    this.$input = $(o.input)\n    .on('blur.tt', this._handleBlur)\n    .on('focus.tt', this._handleFocus)\n    .on('keydown.tt', this._handleSpecialKeyEvent);\n\n    // ie7 and ie8 don't support the input event\n    // ie9 doesn't fire the input event when characters are removed\n    // not sure if ie10 is compatible\n    if (!utils.isMsie()) {\n      this.$input.on('input.tt', this._compareQueryToInputValue);\n    }\n\n    else {\n      this.$input\n      .on('keydown.tt keypress.tt cut.tt paste.tt', function($e) {\n        // if a special key triggered this, ignore it\n        if (that.specialKeyCodeMap[$e.which || $e.keyCode]) { return; }\n\n        // give the browser a chance to update the value of the input\n        // before checking to see if the query changed\n        setTimeout(that._compareQueryToInputValue, 0);\n      });\n    }\n\n    // helps with calculating the width of the input's value\n    this.$overflowHelper = buildOverflowHelper(this.$input);\n  }\n\n  utils.mixin(InputView.prototype, EventTarget, {\n    // private methods\n    // ---------------\n\n    _handleFocus: function() {\n      this.trigger('focus');\n    },\n\n    _handleBlur: function() {\n      this.trigger('blur');\n    },\n\n    _handleSpecialKeyEvent: function($e) {\n      // which is normalized and consistent (but not for IE)\n      var keyName = this.specialKeyCodeMap[$e.which || $e.keyCode];\n\n      keyName && this.trigger(keyName, $e);\n    },\n\n    _compareQueryToInputValue: function() {\n      var inputValue = this.getInputValue(),\n          isSameQuery = compareQueries(this.query, inputValue),\n          isSameQueryExceptWhitespace = isSameQuery ?\n            this.query.length !== inputValue.length : false;\n\n      if (isSameQueryExceptWhitespace) {\n        this.trigger('whitespaceChange', { value: this.query });\n      }\n\n      else if (!isSameQuery) {\n        this.trigger('queryChange', { value: this.query = inputValue });\n      }\n    },\n\n    // public methods\n    // --------------\n\n    destroy: function() {\n      this.$hint.off('.tt');\n      this.$input.off('.tt');\n\n      this.$hint = this.$input = this.$overflowHelper = null;\n    },\n\n    focus: function() {\n      this.$input.focus();\n    },\n\n    blur: function() {\n      this.$input.blur();\n    },\n\n    getQuery: function() {\n      return this.query;\n    },\n\n    getInputValue: function() {\n      return this.$input.val();\n    },\n\n    setInputValue: function(value, silent) {\n      this.$input.val(value);\n\n      // strict equal to support function(value) signature\n      if (silent !== true) {\n        this._compareQueryToInputValue();\n      }\n    },\n\n    getHintValue: function() {\n      return this.$hint.val();\n    },\n\n    setHintValue: function(value) {\n      this.$hint.val(value);\n    },\n\n    getLanguageDirection: function() {\n      return (this.$input.css('direction') || 'ltr').toLowerCase();\n    },\n\n    isOverflow: function() {\n      this.$overflowHelper.text(this.getInputValue());\n\n      return this.$overflowHelper.width() > this.$input.width();\n    },\n\n    isCursorAtEnd: function() {\n      var valueLength = this.$input.val().length,\n          selectionStart = this.$input[0].selectionStart,\n          range;\n\n      if (utils.isNumber(selectionStart)) {\n       return selectionStart === valueLength;\n      }\n\n      else if (document.selection) {\n        // this won't work unless the input has focus, the good news\n        // is this code should only get called when the input has focus\n        range = document.selection.createRange();\n        range.moveStart('character', -valueLength);\n\n        return valueLength === range.text.length;\n      }\n\n      return true;\n    }\n  });\n\n  return InputView;\n\n  function buildOverflowHelper($input) {\n    return $('<span></span>')\n    .css({\n      // position helper off-screen\n      position: 'absolute',\n      left: '-9999px',\n      visibility: 'hidden',\n      // avoid line breaks\n      whiteSpace: 'nowrap',\n      // use same font css as input to calculate accurate width\n      fontFamily: $input.css('font-family'),\n      fontSize: $input.css('font-size'),\n      fontStyle: $input.css('font-style'),\n      fontVariant: $input.css('font-variant'),\n      fontWeight: $input.css('font-weight'),\n      wordSpacing: $input.css('word-spacing'),\n      letterSpacing: $input.css('letter-spacing'),\n      textIndent: $input.css('text-indent'),\n      textRendering: $input.css('text-rendering'),\n      textTransform: $input.css('text-transform')\n    })\n    .insertAfter($input);\n  }\n\n  function compareQueries(a, b) {\n    // strips leading whitespace and condenses all whitespace\n    a = (a || '').replace(/^\\s*/g, '').replace(/\\s{2,}/g, ' ').toLowerCase();\n    b = (b || '').replace(/^\\s*/g, '').replace(/\\s{2,}/g, ' ').toLowerCase();\n\n    return a === b;\n  }\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":5243}]],"length":5243}
